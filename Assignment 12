import java.util.*;

class Main {
    public static ArrayList<Integer> fibonacciiterative(int amount) {
        ArrayList<Integer> fibonacciarray = new ArrayList<Integer>();
        fibonacciarray.add(0);
        fibonacciarray.add(1);
        if (amount - 1 <= 0) {
           for (int i = 2; i == amount + 1; --i) {
               fibonacciarray.remove(i);
           }
        } 
        else {
            for (int i = 1; i <= amount - 1; ++i) {
               int newval = fibonacciarray.get(i) + fibonacciarray.get(i - 1);
               fibonacciarray.add(newval);
            }
        }
        return fibonacciarray;
    }
    
    public static void fibonaccirecursive(int amount, ArrayList<Integer> array) {
        if (amount - 1 <= 0) {
            if (array.size() >= amount) {
                array.remove(array.size() - 1);
                if (array.size() == amount) {
                    System.out.println(array);
                }
                fibonaccirecursive(amount,array);
            }
        }
        else {
            if (array.size() <= (amount)) {
                int newval = array.get(array.size() - 1) + array.get(array.size() - 2);
                array.add(newval);
                if (array.size() > amount) {
                    System.out.println(array);
                }
                fibonaccirecursive(amount,array);
            }
        }
    }
    
    public static ArrayList<Integer> decimaltobinaryiterative(int number) {
        ArrayList<Integer> binarytable = new ArrayList<Integer>();
        ArrayList<Integer> binarytable2 = new ArrayList<Integer>();
        while (number != 0) {
            binarytable.add(number % 2);
            number = number/2;
        }
        
        for (int i = binarytable.size() - 1; i >= 0; i--) {
            binarytable2.add(binarytable.get(i));
        }
       
        return binarytable2;
    }
    
    public static void decimaltobinaryrecursive(int number, ArrayList<Integer> array) {
        if (number != 0) {
            array.add(number % 2);
            number = number/2;
        
            decimaltobinaryrecursive(number,array); 
        }
       
    }
    
    public static void main(String[] args) {
        ArrayList<Integer> fibbotable = fibonacciiterative(15);
        System.out.println(fibbotable);
        
        ArrayList<Integer> fibonacciarray2 = new ArrayList<Integer>();
        fibonacciarray2.add(0);
        fibonacciarray2.add(1);
        fibonaccirecursive(1,fibonacciarray2);
        
        ArrayList<Integer> binarytest = decimaltobinaryiterative(372);
        System.out.println(binarytest);
        
        ArrayList<Integer> binarytest2 = new ArrayList<Integer>();
        decimaltobinaryrecursive(372,binarytest2);
        
        ArrayList<Integer> binarytest2rev = new ArrayList<Integer>();
        for (int i = binarytest2.size() - 1; i >= 0; i--) {
            binarytest2rev.add(binarytest2.get(i));
        }
        
        System.out.println(binarytest2rev);
    }
}
